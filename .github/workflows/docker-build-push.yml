name: Build with Conditional Security Scans

on:
  push:
    branches:
      - main

jobs:
  ###################################################################
  # 1) BUILD JOB
  ###################################################################
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Docker image
        id: build
        run: |
          # Build the image and capture the output
          docker build -t fafiorim/firefly:latest . 2>&1 | tee build_output.log
          
          # Extract the digest from the build output
          BUILD_DIGEST=$(grep 'writing image sha256:' build_output.log | awk '{print $3}')
          
          # Write build summary
          echo "=== Docker Image Build Summary ===" >> $GITHUB_STEP_SUMMARY
          echo "Image Name: fafiorim/firefly:latest" >> $GITHUB_STEP_SUMMARY
          echo "Build Digest: $BUILD_DIGEST" >> $GITHUB_STEP_SUMMARY
          
          # Save digest for later use
          echo "build_digest=$BUILD_DIGEST" >> $GITHUB_OUTPUT

      - name: Save Docker image
        run: |
          # Save the image
          docker save fafiorim/firefly:latest -o firefly.tar
          
          # Get image details
          IMAGE_SIZE=$(docker images fafiorim/firefly:latest --format "{{.Size}}")
          
          # Append to build summary
          echo "Image Size: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "Container Archive: firefly.tar" >> $GITHUB_STEP_SUMMARY

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: firefly.tar

  ###################################################################
  # 2) SECURITY SCAN
  ###################################################################
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Docker artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh

      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV

      - name: Run Full Security Scan
        run: tmas scan docker-archive:firefly.tar -VMS --saveSBOM > scan-results.json

      - name: Debug - List Files
        run: ls -la

      - name: Upload Scan Results and SBOM
        uses: actions/upload-artifact@v4
        with:
          name: all-scan-results
          path: |
            scan-results.json
            **/SBOM_*.json
            ./SBOM_*.json

  ###################################################################
  # 3) PARSE SCAN RESULTS
  ###################################################################
  parse-scan-results:
    needs: security-scan
    runs-on: ubuntu-latest
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    steps:
      - name: Download Scan Results
        uses: actions/download-artifact@v4
        with:
          name: all-scan-results
          path: .

      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Parse Results
        run: |
          jq '{ vulnerabilities: .vulnerabilities }' scan-results.json > vulnerability-scan-results.json
          jq '{ malware: .malware }' scan-results.json > malware-scan-results.json
          jq '{ secrets: .secrets }' scan-results.json > secret-scan-results.json

      - name: Upload Parsed Results
        uses: actions/upload-artifact@v4
        with:
          name: parsed-results
          path: |
            vulnerability-scan-results.json
            malware-scan-results.json
            secret-scan-results.json

  ###################################################################
  # 4) VULNERABILITY SCANNER
  ###################################################################
  vulnerability-scanner:
    needs: parse-scan-results
    runs-on: ubuntu-latest
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    steps:
      - name: Download Parsed Results
        uses: actions/download-artifact@v4
        with:
          name: parsed-results
          path: .

      - name: Process Vulnerability Results
        id: vuln_check
        run: |
          echo "=== Vulnerability Scan Summary ===" >> $GITHUB_STEP_SUMMARY
          
          CRITICAL=$(jq -r '.vulnerabilities.criticalCount' vulnerability-scan-results.json)
          HIGH=$(jq -r '.vulnerabilities.highCount' vulnerability-scan-results.json)
          MEDIUM=$(jq -r '.vulnerabilities.mediumCount' vulnerability-scan-results.json)
          LOW=$(jq -r '.vulnerabilities.lowCount' vulnerability-scan-results.json)
          TOTAL=$(jq -r '.vulnerabilities.totalVulnCount' vulnerability-scan-results.json)
          
          echo "Total Vulnerabilities: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "Critical: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "High: $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "Medium: $MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "Low: $LOW" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "Critical vulnerabilities found: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload Vulnerability Results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-results
          path: vulnerability-scan-results.json

  ###################################################################
  # 5) MALWARE SCANNER
  ###################################################################
  malware-scanner:
    needs: parse-scan-results
    runs-on: ubuntu-latest
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    steps:
      - name: Download Parsed Results
        uses: actions/download-artifact@v4
        with:
          name: parsed-results
          path: .

      - name: Process Malware Results
        id: malware_check
        run: |
          echo "=== Malware Scan Summary ===" >> $GITHUB_STEP_SUMMARY
          
          FINDINGS_COUNT=$(jq -r '.malware.findings | length' malware-scan-results.json)
          echo "Total Malware Findings: $FINDINGS_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ "$FINDINGS_COUNT" -gt 0 ]; then
            echo "Malware detected!" >> $GITHUB_STEP_SUMMARY
            echo "Details:" >> $GITHUB_STEP_SUMMARY
            jq -r '.malware.findings[] | "File: \(.fileName)\nMalware: \(.foundMalwares[].malwareName)"' malware-scan-results.json >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "No malware detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Malware Results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results
          path: malware-scan-results.json

  ###################################################################
  # 6) SECRETS SCANNER
  ###################################################################
  secrets-scanner:
    needs: parse-scan-results
    runs-on: ubuntu-latest
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    steps:
      - name: Download Parsed Results
        uses: actions/download-artifact@v4
        with:
          name: parsed-results
          path: .

      - name: Process Secrets Results
        id: secrets_check
        run: |
          echo "=== Secrets Scan Summary ===" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_FILES=$(jq -r '.secrets.totalFilesScanned' secret-scan-results.json)
          UNMITIGATED=$(jq -r '.secrets.unmitigatedFindingsCount' secret-scan-results.json)
          OVERRIDDEN=$(jq -r '.secrets.overriddenFindingsCount' secret-scan-results.json)
          
          echo "Files Scanned: $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
          echo "Unmitigated Findings: $UNMITIGATED" >> $GITHUB_STEP_SUMMARY
          echo "Overridden Findings: $OVERRIDDEN" >> $GITHUB_STEP_SUMMARY
          
          if [ "$UNMITIGATED" -gt 0 ]; then
            echo "Secrets detected!" >> $GITHUB_STEP_SUMMARY
            echo "Details:" >> $GITHUB_STEP_SUMMARY
            jq -r '.secrets.findings.unmitigated[] | "Rule: \(.ruleID)\nPath: \(.location.path)"' secret-scan-results.json >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "No secrets detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Secrets Results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-results
          path: secret-scan-results.json

  ###################################################################
  # 7) SBOM
  ###################################################################
  sbom-scanner:
    needs: security-scan
    runs-on: ubuntu-latest
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          name: all-scan-results
          path: .

      - name: Debug - List Files
        run: |
          pwd
          ls -la
          find . -name "SBOM_*.json" || echo "No SBOM files found"

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-results
          path: |
            **/SBOM_*.json
            ./SBOM_*.json
        continue-on-error: true

  ###################################################################
  # 8) PUSH IMAGE
  ###################################################################
  push-image:
    needs:
      - vulnerability-scanner
      - malware-scanner
      - secrets-scanner
      - sbom-scanner
    runs-on: ubuntu-latest
    if: |
      always() &&
      (
        needs.vulnerability-scanner.result == 'success' || needs.vulnerability-scanner.result == 'skipped'
      ) &&
      (
        needs.malware-scanner.result == 'success' || needs.malware-scanner.result == 'skipped'
      ) &&
      (
        needs.secrets-scanner.result == 'success' || needs.secrets-scanner.result == 'skipped'
      ) &&
      (
        needs.sbom-scanner.result == 'success' || needs.sbom-scanner.result == 'skipped'
      )
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Docker artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load --input firefly.tar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image and capture digest
        id: push
        run: |
          # Push the image
          docker push fafiorim/firefly:latest
          
          # Get the digest of the pushed image
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' fafiorim/firefly:latest)
          
          # Write to step summary
          echo "=== Docker Image Push Summary ===" >> $GITHUB_STEP_SUMMARY
          echo "Container Archive Details:" >> $GITHUB_STEP_SUMMARY
          echo "- Filename: firefly.tar" >> $GITHUB_STEP_SUMMARY
          echo "- Image Tag: fafiorim/firefly:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Registry Details:" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: docker.io" >> $GITHUB_STEP_SUMMARY
          echo "- Full Image Reference with Digest:" >> $GITHUB_STEP_SUMMARY
          echo "$DIGEST" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Example kubectl commands to deploy this image:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Update deployment with new image" >> $GITHUB_STEP_SUMMARY
          echo "kubectl set image deployment/firefly firefly=$DIGEST" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or create a new deployment" >> $GITHUB_STEP_SUMMARY
          echo "kubectl create deployment firefly --image=$DIGEST" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Set output for potential future use
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
